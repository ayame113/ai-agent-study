name: Build and Deploy Marp Slides

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Marp CLI
        run: npm install -g @marp-team/marp-cli

      - name: Build slides
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            // Create dist directory
            if (!fs.existsSync('dist')) {
              fs.mkdirSync('dist');
            }

            // Get all markdown files in docs directory
            const docsDir = 'docs';
            const files = fs.readdirSync(docsDir)
              .filter(file => file.endsWith('.md') && file !== 'README.md')
              .map(file => path.join(docsDir, file));

            // Build each slide
            for (const file of files) {
              const filename = path.basename(file, '.md');
              console.log(`Building ${filename}...`);
              
              // Build HTML
              execSync(`marp "${file}" -o "dist/${filename}.html" --html`, { stdio: 'inherit' });
              
              // Build PDF
              execSync(`marp "${file}" -o "dist/${filename}.pdf" --allow-local-files`, { stdio: 'inherit' });
            }

      - name: Create index page
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read all markdown files to get titles
            const docsDir = 'docs';
            const files = fs.readdirSync(docsDir)
              .filter(file => file.endsWith('.md') && file !== 'README.md')
              .map(file => path.join(docsDir, file));

            // Extract titles from markdown files
            const slides = files.map(file => {
              const filename = path.basename(file, '.md');
              const content = fs.readFileSync(file, 'utf8');
              const titleMatch = content.match(/^# (.+)$/m);
              const title = titleMatch ? titleMatch[1] : filename;
              return { filename, title };
            });

            // Generate index HTML
            const html = `<!DOCTYPE html>
            <html lang="ja">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Marp Slides</title>
              <script src="https://cdn.tailwindcss.com"></script>
            </head>
            <body class="bg-gray-50">
              <div class="container mx-auto max-w-4xl px-4 py-12">
                <h1 class="text-4xl font-bold text-gray-800 border-b-2 border-gray-300 pb-4 mb-8">Marp Slides</h1>
                <ul class="space-y-4">
            ${slides.map(slide => `      <li class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
                    <strong class="text-xl text-gray-800 block mb-2">${slide.title}</strong>
                    <div class="flex gap-4">
                      <a href="${slide.filename}.html" class="text-blue-600 hover:text-blue-800 hover:underline">HTML</a>
                      <a href="${slide.filename}.pdf" class="text-blue-600 hover:text-blue-800 hover:underline">PDF</a>
                    </div>
                  </li>`).join('\n')}
                </ul>
              </div>
            </body>
            </html>`;

            fs.writeFileSync('dist/index.html', html);
            console.log('Index page created successfully');

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
